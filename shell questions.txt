(1)
Write a shell script to find the sum, the average and the product of the four
integers entered.

echo "Enter four integers:"
read num1 num2 num3 num4

sum=$((num1 + num2 + num3 + num4))
average=$(echo "scale=2; $sum / 4" | bc)
product=$((num1 * num2 * num3 * num4))

echo "Sum: $sum"
echo "Average: $average"
echo "Product: $product"

(2)
a) Write a program to check whether a number entered is odd or even.
b) Write a shell script to print given number in reverse order
c) Write a shell script to print sum of all digits of a given number

read -p "Enter an integer: " number

#number is odd or even
if (( number % 2 == 0 )); then
    echo "$number is even."
else
    echo "$number is odd."
fi

#number in reverse order
original_number=$number
reverse=0
while [ $number -gt 0 ]; do
    reverse=$((reverse * 10 + number % 10))
    number=$((number / 10))
done
echo "Reversed number: $reverse"

#sum of digits
number=$original_number
sum=0
while [ $number -gt 0 ]; do
    sum=$((sum + number % 10))
    number=$((number / 10))
done
echo "Sum of digits: $sum"

(3)
Write a shell script that accepts any year from the keyboard and determine
whether the year is a leap year or not.

read -p "Enter a year: " year

if (( (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0) )); then
    echo "$year is a leap year."
else
    echo "$year is not a leap year."
fi

(4)
Write a shell script to find the factorial of a number

echo "Enter a number:"
read number

factorial=1
counter=$number

while [ $counter -gt 0 ]
do
  factorial=$((factorial * counter))
  counter=$((counter - 1))
done

echo "The factorial of $number is $factorial"

(5)
Write a program to print prime numbers from 1 to 100

for ((n=2; n<=100; n++))
do
  flag=0

  for ((i=2; i<n; i++))
  do
    if (( n % i == 0 ))
    then
      flag=1
      break
    fi
  done
  
  if (( flag == 0 ))
  then
    echo -n "$n  "
  fi
done

(6)
Write a script for printing Numbers in ascending order
start=1
end=100

for ((i=start; i<=end; i++)); do
    echo -n "$i "
done
echo

(7)
Write a shell script which displays a list of files in the current directory to
which we have read, write and execute permissions.
echo "Files with read, write, and execute permissions:"
for file in *; do
    if [ -f "$file" ] && [ -r "$file" ] && [ -w "$file" ] && [ -x "$file" ]; then
        echo "$file"
    fi
done

(8)
Write a shell script to find the number of occurrences of a particular digit in a
given number.
read -p "Enter a number: " number
read -p "Enter the digit to count: " digit
count=$(echo "$number" | grep -o "$digit" | wc -l)
echo "The digit '$digit' occurs $count times in the number $number."

(9)
Write shell script to print alternate digits when a 7 digit number is passed as
input. (Eg: Input: 1234567,Ans: 1,3,5,7)
#!/bin/bash

# Check if the input is a 7-digit number
if [[ ! $1 =~ ^[0-9]{7}$ ]]; then
    echo "Please provide a valid 7-digit number."
    exit 1
fi

# Get the input number
number=$1

# Initialize an empty string to hold the result
result=""

# Loop through the digits of the number
for (( i=0; i<${#number}; i+=2 )); do
    result+="${number:i:1}"
    if (( i + 2 < ${#number} )); then
        result+=","
    fi
done

# Print the result
echo "$result"

(10)
Write a shell script that takes a command line argument and displays the
details depending on whether the argument is a directory, a file, or something
else.

(11)
Write a shell script that accepts a filename, starting line number and ending
line number as arguments and displays all the lines between the given line
numbers.
#!/bin/bash

# Check if the correct number of arguments is provided
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 <filename> <start_line> <end_line>"
    exit 1
fi

# Assign arguments to variables
filename=$1
start_line=$2
end_line=$3

# Display the lines between the given line numbers
sed -n "${start_line},${end_line}p" "$filename"

(12)
Write a shell script that deletes all lines containing a specified word in one or
more files supplied as arguments to it.
#!/bin/bash

# Check if at least two arguments are provided (word and at least one file)
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <word> <file1> [file2 ... fileN]"
    exit 1
fi

# Assign the first argument as the word to search for
word=$1

# Loop through all the files provided as arguments
for file in "${@:2}"; do
    # Check if the file exists
    if [ -f "$file" ]; then
        # Use sed to delete lines containing the specified word
        sed -i "/$word/d" "$file"
        echo "Deleted lines containing '$word' from '$file'."
    else
        echo "Error: File '$file' not found."
    fi
done

